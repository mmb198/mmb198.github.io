<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on mmb198 blog site</title>
		<link>https://mmb198.github.io/en/posts/</link>
		<description>Recent content in Posts on mmb198 blog site</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-au</language>
		<copyright>mmb198</copyright>
		<lastBuildDate>Wed, 21 Feb 2024 21:37:43 +0800</lastBuildDate>
		<atom:link href="https://mmb198.github.io/en/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Cloud Engineer Academy Week 2 Blog</title>
			<link>https://mmb198.github.io/en/posts/ca_week2/</link>
			<pubDate>Wed, 21 Feb 2024 21:37:43 +0800</pubDate>
			
			<guid>https://mmb198.github.io/en/posts/ca_week2/</guid>
			<description>Version Control Learnt about 3 main types of version control systems: 1. Local: All repositories/data are only held and accessible from a local machine, making it difficult to collaborate with others. 2. Centralised: The repository is kept on a main server, any updates have to be committed to the central server. 3. Distributed: Repositories are distributed across end users and servers. Any of the users or servers can act as the central repository.</description>
			<content type="html"><![CDATA[<h1 id="version-control">Version Control</h1>
<p>Learnt about 3 main types of version control systems:
1. Local: All repositories/data are only held and accessible from a local machine, making it difficult to collaborate with others.
2. Centralised: The repository is kept on a main server, any updates have to be committed to the central server.
3. Distributed: Repositories are distributed across end users and servers. Any of the users or servers can act as the central repository.</p>
<h1 id="git">GIT</h1>
<ul>
<li>Set up a GitHub account, configured MFA and ssh access. Command to check that ssh is connected **ssh -T <a href="mailto:git@github.com">git@github.com</a></li>
<li>Installed git in Windows and Linux and set up CLI access via ssh.
<ul>
<li>SSH encrypts the data flow between my machine and github, ensuring confidentiality in the transmission of data that I commit to the repo.</li>
</ul>
</li>
</ul>
<h1 id="aws-cli">AWS CLI</h1>
<ul>
<li>Installed the AWS CLI in Windows and Linux</li>
<li>Added security keys in AWS console and installed them into AWS CLI. This now enables control of my AWS account through the CLI. The CLI is definitely faster than clicking and confirming through the console.</li>
<li>Command structure:
aws + service type + what you want to do, examples:
aws + s3 service + list files = <strong>aws s3 ls</strong>
aws + iam + list access keys = <strong>aws iam list-access-keys</strong></li>
</ul>
<h1 id="cloud-architecture--system-design">Cloud Architecture &amp; System Design</h1>
<h2 id="front-end-vs-back-end">Front end vs back end</h2>
<ul>
<li>Front end = user facing, interacts with the backend via API&rsquo;s (Application Programming Interface).</li>
<li>Back end = All of the infrastructure and applications that enables the front end to function.</li>
</ul>
<h2 id="vertical-vs-horizontal-scaling">Vertical vs Horizontal scaling</h2>
<ul>
<li>Vertical scaling = increasing or decreasing the size of the hardware - such as EC2 t2.micro, t2.small, t2.medium etc. As the size increases additional hardware is provided such as more CPU cores and memory.</li>
<li>Horizontal scaling = Instead of increasing hardware capacity as with vertical scaling, horizontal scaling instead increases the amount of instances. Instead of increasing from a t2.micro instance to a single t2.small instance, you could run 3 x t2.micro instances. This provides additional computing resources and also provides redundancy as there are now two extra compute instances in the event that one of them becomes unresponsive or crashes.</li>
</ul>
<h2 id="load-balancing">Load Balancing</h2>
<p>These can be hardware or software that distributes data across your infrastructure. Is used to ensure that a server isn&rsquo;t being overloaded while other servers are sitting idle. Can also decide which server is closest to the end user in order to reduce latency for their request.</p>
<h2 id="high-availability-and-fault-tolerance">High Availability and Fault Tolerance</h2>
<ul>
<li>High availability = Redundancy within a network that enables standby infrastructure to take over in the event of the main services becoming unresponsive or crashing. Multiple instances can be used across different Availability Zones (AZ) to ensure continued operation even if an AZ experiences an outage. Use of health checks, auto scaling and load balancing to maintain high availability.</li>
<li>Fault tolerance = The ability to continue providing services in the event of a fault, issue or outage. Intent is that faults do not impact the user experience.</li>
</ul>
<h2 id="lab---design-a-web-application-architecture">Lab - Design a Web Application Architecture</h2>
<p><img src="/week2.png" alt="AWS web app architecture v3"></p>
<p>Summary of Cloud Architecture for Web Application</p>
<p>This document outlines the purpose of each component and the rationale behind key architectural decisions in our cloud architecture for the web application.</p>
<p><strong>Components:</strong></p>
<ul>
<li><strong>VPC (Virtual Private Cloud):</strong> Provides a secure and isolated environment for our application resources.</li>
<li><strong>Route 53:</strong> Routes incoming traffic to the application through a domain name.</li>
<li><strong>Public and Private Subnets:</strong> </li>
<li><strong>Public Subnets:</strong>
<ul>
<li><strong>Purpose:</strong> Host web servers that require internet access to serve content to users.</li>
<li><strong>Reasoning:</strong> Enables users to access the application through the internet.</li>
</ul>
</li>
<li><strong>Private Subnets:</strong>
<ul>
<li><strong>Purpose:</strong> Host application servers and databases that don&rsquo;t require direct internet access but need to communicate with web servers.</li>
<li><strong>Reasoning:</strong> Enhances security by restricting access to critical components from the public internet.</li>
</ul>
</li>
<li><strong>Web Servers and Application Servers:</strong> </li>
<li><strong>Web Servers (EC2 Instances):</strong>
<ul>
<li><strong>Purpose:</strong> Serve static content (HTML, CSS, JavaScript) and handle initial user requests.</li>
<li><strong>Reasoning:</strong> Offloads static content serving from application servers, improving performance and scalability.</li>
</ul>
</li>
<li><strong>Application Servers (EC2 Instances):</strong>
<ul>
<li><strong>Purpose:</strong> Process application logic, interact with the database, and generate dynamic content.</li>
<li><strong>Reasoning:</strong> Provides flexibility and scalability for handling application logic and database interactions.EC2 instances host the web application and application logic.</li>
</ul>
</li>
<li><strong>Load Balancers:</strong> 
<ul>
<li><strong>Purpose:</strong> Distribute incoming traffic evenly across multiple web and application servers.</li>
<li><strong>Reasoning:</strong> Ensures high availability and prevents overloading individual servers, improving application performance and scalability.</li>
</ul>
</li>
<li><strong>AWS WAF:</strong> Protects the web application from malicious attacks.
<ul>
<li>
<ul>
<li><strong>Purpose:</strong> Filters and blocks malicious traffic attempting to exploit vulnerabilities in the web application.</li>
</ul>
</li>
<li><strong>Reasoning:</strong> Strengthens application security by mitigating common web attacks like SQL injection and cross-site scripting</li>
</ul>
</li>
<li><strong>Amazon RDS (Relational Database Service):</strong> 
<ul>
<li><strong>Purpose:</strong> Provides a managed, scalable, and highly available database service for storing application data.</li>
<li><strong>Reasoning:</strong> Offers a reliable and secure solution for managing application data without the need for manual database administration.</li>
</ul>
</li>
<li><strong>AWS S3:</strong> 
<ul>
<li>
<ul>
<li><strong>Purpose:</strong> Stores static content like images, videos, and other application assets cost-effectively and efficiently.</li>
</ul>
</li>
<li><strong>Reasoning:</strong> Provides a scalable and cost-effective way to store and manage large amounts of static content, offloading storage from web servers and improving performance.</li>
</ul>
</li>
</ul>
<p><strong>Architectural Decisions:</strong></p>
<ul>
<li><strong>Horizontal Scaling:</strong> Web and application servers are deployed in auto scaling groups for horizontal scaling. This allows automatic scaling up or down based on traffic demands, ensuring optimal performance and resource utilization.</li>
<li><strong>Redundancy:</strong> Deploying critical components like web servers, application servers, and databases across multiple availability zones within the VPC ensures continued operation even if one zone experiences an outage.</li>
<li><strong>Security:</strong> Utilizing a VPC with public/private subnets and a WAF strengthens the application&rsquo;s security posture by isolating resources and filtering malicious traffic.</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Cloud Engineer Academy Week 1 Blog</title>
			<link>https://mmb198.github.io/en/posts/ca_week1/</link>
			<pubDate>Wed, 14 Feb 2024 21:25:43 +0800</pubDate>
			
			<guid>https://mmb198.github.io/en/posts/ca_week1/</guid>
			<description>I&amp;rsquo;ve embarked on a 12 week Cloud Engineering Academy, with the aim to increase my knowledge and skills in cloud computing. This is my first blog and I will be using this blog space to post summaries of my weekly study. The blog is currently hosted on Github and I am aiming to move the blog onto my cloud host as I progress through the course.
Week 1
To make my weekly summary, I start by making a list of topics/subjects that I study this week from my Obisidian note titles.</description>
			<content type="html"><![CDATA[<p>I&rsquo;ve embarked on a 12 week Cloud Engineering Academy, with the aim to increase my knowledge and skills in cloud computing. This is my first blog and I will be using this blog space to post summaries of my weekly study. The blog is currently hosted on Github and I am aiming to move the blog onto my cloud host as I progress through the course.</p>
<p>Week 1</p>
<p>To make my weekly summary, I start by making a list of topics/subjects that I study this week from my Obisidian note titles. Once I&rsquo;ve compiled this list, I then test my recall by attempting to write down all the information I retained about the subject. I then input my summaries into Bard for a quality control/accuracy check and review the items that bard highlights against my Obsidian notes. Below is my summary for week 1:</p>
<h2 id="cloud-service-types">Cloud Service Types</h2>
<p>IAAS - Infrastructure as a Service - Compute, storage etc (EC2, S3) - Base infrastructure that you can build whatever you want on.
PAAS - Platform as a Service - The underlying infrastructure is looked after by the service provider (hardware and OS), meaning you can focus on the service/app you are building/deploying (ex: Elastic Beanstalk, Lambda)
SAAS - Software as a Service - Elastic, Adobe Photoshop, AI images, M365, Teams etc</p>
<ol>
<li>Onprem - All physical infrastructure and services are provided &ldquo;on premises&rdquo;.</li>
<li>Cloud - All services are provided through the cloud. All hardware is through the providers Data Centre. Maintenance, security, power and cooling for the physical infrastructure is undertaken by the Service Provider.</li>
<li>Hybrid - Combination of both onprem and cloud infrastructure.</li>
</ol>
<h2 id="sdlc">SDLC</h2>
<p>Software Development Life Cycle DLC models: Waterfall and Agile</p>
<p>Sequential approach: Requirements (scope), Design, Development, Testing, Deployment, Maintenance.</p>
<h2 id="aws-account-creation">AWS account creation</h2>
<ol>
<li>Created admin account</li>
<li>Added MFA to root and admin accounts</li>
<li>Set billing alerts</li>
</ol>
<h2 id="virtualisation">Virtualisation</h2>
<p>Baremetal, type 1 hypervisors vs host based virtualisation
Virtualisation of hardware (cpu and memory for O/S and compute tasks),  storage (multiple disks seen as a single storage device)</p>
<p>The ability for a single server to act as multiple servers by allocating resources (cpu, memory etc) across virtual machines. Example 32 core CPU and 64GB of ram server can become 4 virtual machines/servers of 8 CPU cores and 16GB of ram. Resources do not need to be equal across VM&rsquo;s and should reflect the amount resources required for the application/task.</p>
<h2 id="cloud-networking">Cloud networking</h2>
<p>Introduction into networking engineering concepts of IP addressing, DHCP, DNS, NAT and protocols (TCP/IP, HTTP/HTTPS). Overview of networking hardware (routers and switches) and the ability to deploy virtual hardware in cloud deployments.</p>
<h2 id="operating-systems">Operating Systems</h2>
<p>Overview of three main O/S&rsquo;s (Windows, Linux, macOS). Touched on the different Linux distros (CentOS, Redhat, Ubuntu, SELinux etc), that many are open source and low cost.</p>
<h2 id="databases">Databases</h2>
<p>Databases were split into two main types, relational and nonrelational (nonSQL).
Relational is used to for large datasets with similar inputs, such as maintaining the name, address, DOB etc for staff and students at a school/university.
NonSQL is usually used when varied datasets will be ingested and flexibility is required. Can be column based, graph, key-value, document etc type database.</p>
<p>Captain CRUD: Create, Read, Update, Delete. Database strings/command types. Can be used on both Relational and NonSQL database types.</p>
<h2 id="labsprojects">Labs/projects</h2>
<ol>
<li>AWS account setup - touched on above</li>
<li>Completed basic networking engineering commands such as ping, find ip address (ipconfig/ifconfig, web ip check), traceroute/tracert, curl requests.</li>
<li>Windows and macOS setups - Discovered Chocolatey, as package manager for Windows, I love it. Ubuntu - sudo apt-get install &ldquo;program name&rdquo;, I found the Chocolatey similar to Debian/Ubuntu advanced packaging tool (APT), apt-get install &ldquo;program name&rdquo; vs choco install &ldquo;program name&rdquo;.
<ol>
<li>Install Choclatey in Powershell:</li>
<li>Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&lsquo;<a href="https://community.chocolatey.org/install.ps1'">https://community.chocolatey.org/install.ps1'</a>))</li>
<li>Basic Chocolatey commands:</li>
<li>choco install &ldquo;program name&rdquo;</li>
<li>choco list - displays a list of installed packages</li>
<li>choco search &ldquo;package name&rdquo; - searches for available packages</li>
<li>choco outdated - will provide a list of outdated packages on the machine</li>
<li>choco upgrade &ldquo;package name&rdquo; - upgrade the outdated packages identified in the previous command</li>
<li>choco uninstall &ldquo;package name&rdquo;</li>
</ol>
</li>
</ol>
<p><img src="/week1.png" alt="Week 1 - Obisidian Mind Map"></p>
]]></content>
		</item>
		
	</channel>
</rss>
